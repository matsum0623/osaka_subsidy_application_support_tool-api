const { core } = require('./core')

module.exports = {
  get_item: async (after_school_id, instructor_id) => {
    const response = await core.query('PK = :p_key AND SK = :s_key', {
      ':p_key': 'AFTER_SCHOOL#' +  after_school_id,
      ':s_key': 'INSTRUCTOR#' + instructor_id,
    })
    return (response.Items && response.Items.length > 0) ? response.Items[0] : {}
  },
  get_all: async (after_school_id) => {
    const response = await core.query('PK = :p_key AND begins_with(SK, :s_key)', {
      ':p_key': 'AFTER_SCHOOL#' +  after_school_id,
      ':s_key': 'INSTRUCTOR#',
    })
    return response.Items
  },
  put: async (after_school_id, instructor_id, instructor_name, qualification, additional, medical_care, seiki, koyou, order, retirement_date="false") => {
    return await core.put({
      PK: 'AFTER_SCHOOL#' +  after_school_id,
      SK: 'INSTRUCTOR#' +  instructor_id,
      Name: instructor_name,
      Qualification: qualification,
      Additional: additional,
      MedicalCare: medical_care,
      Seiki: seiki,
      Koyou: koyou,
      Order: order,
      RetirementDate: retirement_date,
    })
  },
  delete: async (after_school_id, instructor_id) => {
    return await core.delete({
      PK: 'AFTER_SCHOOL#' +  after_school_id,
      SK: 'INSTRUCTOR#' +  instructor_id,
    })
  },
  get_new_id: async (after_school_id) => {
    const response = await core.query('PK = :p_key AND begins_with(SK, :s_key)', {
      ':p_key': 'AFTER_SCHOOL#' +  after_school_id,
      ':s_key': 'INSTRUCTOR#',
    })
    // 指導員の登録がなければ「0001」を返す
    if (!(response.Items && response.Items.length > 0)) return '0001'
    // 指導員の登録があれば、最大のIDに1を加えたものを返す
    return ('0000' + (parseInt(response.Items.sort((a, b) => a.SK < b.SK ? 1 : -1)[0].SK.slice(-4)) + 1)).slice(-4)
  },
}
